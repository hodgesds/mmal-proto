// Code generated by protoc-gen-go.
// source: mmal.proto
// DO NOT EDIT!

/*
Package mmal is a generated protocol buffer package.

It is generated from these files:
	mmal.proto

It has these top-level messages:
	Path
	PathChild
	Error
	Request
	Reply
	PingRequest
	PongReply
	PathRequest
	PathReply
	TimeSeriesRequest
	TimeSeriesReply
	TimeSeries
	KeyValues
	KeyValuePair
	Value
*/
package mmal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_TYPE_DOUBLE   Type = 0
	Type_TYPE_FLOAT    Type = 1
	Type_TYPE_INT64    Type = 2
	Type_TYPE_UINT64   Type = 3
	Type_TYPE_INT32    Type = 4
	Type_TYPE_FIXED64  Type = 5
	Type_TYPE_FIXED32  Type = 6
	Type_TYPE_BOOL     Type = 7
	Type_TYPE_STRING   Type = 8
	Type_TYPE_BYTES    Type = 9
	Type_TYPE_UINT32   Type = 10
	Type_TYPE_ENUM     Type = 11
	Type_TYPE_SFIXED32 Type = 12
	Type_TYPE_SFIXED64 Type = 13
	Type_TYPE_SINT32   Type = 14
	Type_TYPE_SINT64   Type = 15
)

var Type_name = map[int32]string{
	0:  "TYPE_DOUBLE",
	1:  "TYPE_FLOAT",
	2:  "TYPE_INT64",
	3:  "TYPE_UINT64",
	4:  "TYPE_INT32",
	5:  "TYPE_FIXED64",
	6:  "TYPE_FIXED32",
	7:  "TYPE_BOOL",
	8:  "TYPE_STRING",
	9:  "TYPE_BYTES",
	10: "TYPE_UINT32",
	11: "TYPE_ENUM",
	12: "TYPE_SFIXED32",
	13: "TYPE_SFIXED64",
	14: "TYPE_SINT32",
	15: "TYPE_SINT64",
}
var Type_value = map[string]int32{
	"TYPE_DOUBLE":   0,
	"TYPE_FLOAT":    1,
	"TYPE_INT64":    2,
	"TYPE_UINT64":   3,
	"TYPE_INT32":    4,
	"TYPE_FIXED64":  5,
	"TYPE_FIXED32":  6,
	"TYPE_BOOL":     7,
	"TYPE_STRING":   8,
	"TYPE_BYTES":    9,
	"TYPE_UINT32":   10,
	"TYPE_ENUM":     11,
	"TYPE_SFIXED32": 12,
	"TYPE_SFIXED64": 13,
	"TYPE_SINT32":   14,
	"TYPE_SINT64":   15,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Path_PathType int32

const (
	Path_LEAF Path_PathType = 0
	Path_NODE Path_PathType = 1
)

var Path_PathType_name = map[int32]string{
	0: "LEAF",
	1: "NODE",
}
var Path_PathType_value = map[string]int32{
	"LEAF": 0,
	"NODE": 1,
}

func (x Path_PathType) String() string {
	return proto.EnumName(Path_PathType_name, int32(x))
}
func (Path_PathType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PathChild_ChildType int32

const (
	PathChild_LEAF PathChild_ChildType = 0
	PathChild_NODE PathChild_ChildType = 1
)

var PathChild_ChildType_name = map[int32]string{
	0: "LEAF",
	1: "NODE",
}
var PathChild_ChildType_value = map[string]int32{
	"LEAF": 0,
	"NODE": 1,
}

func (x PathChild_ChildType) String() string {
	return proto.EnumName(PathChild_ChildType_name, int32(x))
}
func (PathChild_ChildType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Error_ErrorType int32

const (
	Error_INVALID_PATH Error_ErrorType = 0
	Error_EXCEPTION    Error_ErrorType = 1
)

var Error_ErrorType_name = map[int32]string{
	0: "INVALID_PATH",
	1: "EXCEPTION",
}
var Error_ErrorType_value = map[string]int32{
	"INVALID_PATH": 0,
	"EXCEPTION":    1,
}

func (x Error_ErrorType) String() string {
	return proto.EnumName(Error_ErrorType_name, int32(x))
}
func (Error_ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Request_RequestType int32

const (
	Request_PING       Request_RequestType = 0
	Request_PATH       Request_RequestType = 1
	Request_TIMESERIES Request_RequestType = 2
)

var Request_RequestType_name = map[int32]string{
	0: "PING",
	1: "PATH",
	2: "TIMESERIES",
}
var Request_RequestType_value = map[string]int32{
	"PING":       0,
	"PATH":       1,
	"TIMESERIES": 2,
}

func (x Request_RequestType) String() string {
	return proto.EnumName(Request_RequestType_name, int32(x))
}
func (Request_RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Reply_ReplyType int32

const (
	Reply_PONG       Reply_ReplyType = 0
	Reply_PATH       Reply_ReplyType = 1
	Reply_TIMESERIES Reply_ReplyType = 2
)

var Reply_ReplyType_name = map[int32]string{
	0: "PONG",
	1: "PATH",
	2: "TIMESERIES",
}
var Reply_ReplyType_value = map[string]int32{
	"PONG":       0,
	"PATH":       1,
	"TIMESERIES": 2,
}

func (x Reply_ReplyType) String() string {
	return proto.EnumName(Reply_ReplyType_name, int32(x))
}
func (Reply_ReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Path struct {
	Parts    []string      `protobuf:"bytes,1,rep,name=parts" json:"parts,omitempty"`
	Columns  []string      `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Type     Path_PathType `protobuf:"varint,3,opt,name=type,enum=mmal.Path_PathType" json:"type,omitempty"`
	Children []*PathChild  `protobuf:"bytes,4,rep,name=children" json:"children,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Path) GetChildren() []*PathChild {
	if m != nil {
		return m.Children
	}
	return nil
}

type PathChild struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *PathChild) Reset()                    { *m = PathChild{} }
func (m *PathChild) String() string            { return proto.CompactTextString(m) }
func (*PathChild) ProtoMessage()               {}
func (*PathChild) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Error struct {
	Type    Error_ErrorType `protobuf:"varint,1,opt,name=type,enum=mmal.Error_ErrorType" json:"type,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Request struct {
	Id          string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type        Request_RequestType `protobuf:"varint,2,opt,name=type,enum=mmal.Request_RequestType" json:"type,omitempty"`
	PathRequest *PathRequest        `protobuf:"bytes,3,opt,name=path_request,json=pathRequest" json:"path_request,omitempty"`
	PingRequest *PingRequest        `protobuf:"bytes,4,opt,name=ping_request,json=pingRequest" json:"ping_request,omitempty"`
	TsRequest   *TimeSeriesRequest  `protobuf:"bytes,5,opt,name=ts_request,json=tsRequest" json:"ts_request,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Request) GetPathRequest() *PathRequest {
	if m != nil {
		return m.PathRequest
	}
	return nil
}

func (m *Request) GetPingRequest() *PingRequest {
	if m != nil {
		return m.PingRequest
	}
	return nil
}

func (m *Request) GetTsRequest() *TimeSeriesRequest {
	if m != nil {
		return m.TsRequest
	}
	return nil
}

type Reply struct {
	Id        string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Error     *Error           `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Type      Reply_ReplyType  `protobuf:"varint,3,opt,name=type,enum=mmal.Reply_ReplyType" json:"type,omitempty"`
	PathReply *PathReply       `protobuf:"bytes,4,opt,name=path_reply,json=pathReply" json:"path_reply,omitempty"`
	PongReply *PongReply       `protobuf:"bytes,5,opt,name=pong_reply,json=pongReply" json:"pong_reply,omitempty"`
	TsReply   *TimeSeriesReply `protobuf:"bytes,6,opt,name=ts_reply,json=tsReply" json:"ts_reply,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Reply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Reply) GetPathReply() *PathReply {
	if m != nil {
		return m.PathReply
	}
	return nil
}

func (m *Reply) GetPongReply() *PongReply {
	if m != nil {
		return m.PongReply
	}
	return nil
}

func (m *Reply) GetTsReply() *TimeSeriesReply {
	if m != nil {
		return m.TsReply
	}
	return nil
}

type PingRequest struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PongReply struct {
	Pong  string `protobuf:"bytes,1,opt,name=pong" json:"pong,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PongReply) Reset()                    { *m = PongReply{} }
func (m *PongReply) String() string            { return proto.CompactTextString(m) }
func (*PongReply) ProtoMessage()               {}
func (*PongReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PongReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type PathRequest struct {
	Paths    []*Path `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
	Children bool    `protobuf:"varint,2,opt,name=children" json:"children,omitempty"`
}

func (m *PathRequest) Reset()                    { *m = PathRequest{} }
func (m *PathRequest) String() string            { return proto.CompactTextString(m) }
func (*PathRequest) ProtoMessage()               {}
func (*PathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PathRequest) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type PathReply struct {
	Paths []*Path `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
}

func (m *PathReply) Reset()                    { *m = PathReply{} }
func (m *PathReply) String() string            { return proto.CompactTextString(m) }
func (*PathReply) ProtoMessage()               {}
func (*PathReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PathReply) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TimeSeriesRequest struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Priority int32    `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
	Offset   int32    `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Paths    []*Path  `protobuf:"bytes,5,rep,name=paths" json:"paths,omitempty"`
	Columns  []string `protobuf:"bytes,6,rep,name=columns" json:"columns,omitempty"`
}

func (m *TimeSeriesRequest) Reset()                    { *m = TimeSeriesRequest{} }
func (m *TimeSeriesRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeSeriesRequest) ProtoMessage()               {}
func (*TimeSeriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TimeSeriesRequest) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TimeSeriesReply struct {
	Id         string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TimeSeries []*TimeSeries `protobuf:"bytes,2,rep,name=time_series,json=timeSeries" json:"time_series,omitempty"`
	Paths      []*Path       `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
	Error      *Error        `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *TimeSeriesReply) Reset()                    { *m = TimeSeriesReply{} }
func (m *TimeSeriesReply) String() string            { return proto.CompactTextString(m) }
func (*TimeSeriesReply) ProtoMessage()               {}
func (*TimeSeriesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TimeSeriesReply) GetTimeSeries() []*TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *TimeSeriesReply) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *TimeSeriesReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type TimeSeries struct {
	Id       string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Version  string               `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Columns  []*TimeSeries_Column `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Metadata *KeyValues           `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TimeSeries) GetColumns() []*TimeSeries_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TimeSeries) GetMetadata() *KeyValues {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TimeSeries_Column struct {
	Doubles   []float64 `protobuf:"fixed64,1,rep,packed,name=doubles" json:"doubles,omitempty"`
	Floats    []float32 `protobuf:"fixed32,2,rep,packed,name=floats" json:"floats,omitempty"`
	Int32S    []int32   `protobuf:"varint,3,rep,packed,name=int32s" json:"int32s,omitempty"`
	Int64S    []int64   `protobuf:"varint,4,rep,packed,name=int64s" json:"int64s,omitempty"`
	Uint32S   []uint32  `protobuf:"varint,5,rep,packed,name=uint32s" json:"uint32s,omitempty"`
	Uint64S   []uint64  `protobuf:"varint,6,rep,packed,name=uint64s" json:"uint64s,omitempty"`
	Sint32S   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32s" json:"sint32s,omitempty"`
	Sint64S   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64s" json:"sint64s,omitempty"`
	Fixed32S  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32s" json:"fixed32s,omitempty"`
	Fixed64S  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64s" json:"fixed64s,omitempty"`
	Sfixed32S []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32s" json:"sfixed32s,omitempty"`
	Sfixed64S []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64s" json:"sfixed64s,omitempty"`
	Bools     []bool    `protobuf:"varint,13,rep,packed,name=bools" json:"bools,omitempty"`
	Strings   []string  `protobuf:"bytes,14,rep,name=strings" json:"strings,omitempty"`
	RawBytes  [][]byte  `protobuf:"bytes,15,rep,name=raw_bytes,json=rawBytes,proto3" json:"raw_bytes,omitempty"`
	Type      Type      `protobuf:"varint,16,opt,name=type,enum=mmal.Type" json:"type,omitempty"`
	Name      string    `protobuf:"bytes,17,opt,name=name" json:"name,omitempty"`
}

func (m *TimeSeries_Column) Reset()                    { *m = TimeSeries_Column{} }
func (m *TimeSeries_Column) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries_Column) ProtoMessage()               {}
func (*TimeSeries_Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type KeyValues struct {
	KeyValues []*KeyValuePair `protobuf:"bytes,1,rep,name=key_values,json=keyValues" json:"key_values,omitempty"`
}

func (m *KeyValues) Reset()                    { *m = KeyValues{} }
func (m *KeyValues) String() string            { return proto.CompactTextString(m) }
func (*KeyValues) ProtoMessage()               {}
func (*KeyValues) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *KeyValues) GetKeyValues() []*KeyValuePair {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

type KeyValuePair struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values *Value `protobuf:"bytes,2,opt,name=values" json:"values,omitempty"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *KeyValuePair) GetValues() *Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type Value struct {
	Doubles   []float64 `protobuf:"fixed64,1,rep,packed,name=doubles" json:"doubles,omitempty"`
	Floats    []float32 `protobuf:"fixed32,2,rep,packed,name=floats" json:"floats,omitempty"`
	Int32S    []int32   `protobuf:"varint,3,rep,packed,name=int32s" json:"int32s,omitempty"`
	Int64S    []int64   `protobuf:"varint,4,rep,packed,name=int64s" json:"int64s,omitempty"`
	Uint32S   []uint32  `protobuf:"varint,5,rep,packed,name=uint32s" json:"uint32s,omitempty"`
	Uint64S   []uint64  `protobuf:"varint,6,rep,packed,name=uint64s" json:"uint64s,omitempty"`
	Sint32S   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32s" json:"sint32s,omitempty"`
	Sint64S   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64s" json:"sint64s,omitempty"`
	Fixed32S  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32s" json:"fixed32s,omitempty"`
	Fixed64S  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64s" json:"fixed64s,omitempty"`
	Sfixed32S []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32s" json:"sfixed32s,omitempty"`
	Sfixed64S []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64s" json:"sfixed64s,omitempty"`
	Bools     []bool    `protobuf:"varint,13,rep,packed,name=bools" json:"bools,omitempty"`
	Strings   []string  `protobuf:"bytes,14,rep,name=strings" json:"strings,omitempty"`
	RawBytes  [][]byte  `protobuf:"bytes,15,rep,name=raw_bytes,json=rawBytes,proto3" json:"raw_bytes,omitempty"`
	Type      Type      `protobuf:"varint,16,opt,name=type,enum=mmal.Type" json:"type,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*Path)(nil), "mmal.Path")
	proto.RegisterType((*PathChild)(nil), "mmal.PathChild")
	proto.RegisterType((*Error)(nil), "mmal.Error")
	proto.RegisterType((*Request)(nil), "mmal.Request")
	proto.RegisterType((*Reply)(nil), "mmal.Reply")
	proto.RegisterType((*PingRequest)(nil), "mmal.PingRequest")
	proto.RegisterType((*PongReply)(nil), "mmal.PongReply")
	proto.RegisterType((*PathRequest)(nil), "mmal.PathRequest")
	proto.RegisterType((*PathReply)(nil), "mmal.PathReply")
	proto.RegisterType((*TimeSeriesRequest)(nil), "mmal.TimeSeriesRequest")
	proto.RegisterType((*TimeSeriesReply)(nil), "mmal.TimeSeriesReply")
	proto.RegisterType((*TimeSeries)(nil), "mmal.TimeSeries")
	proto.RegisterType((*TimeSeries_Column)(nil), "mmal.TimeSeries.Column")
	proto.RegisterType((*KeyValues)(nil), "mmal.KeyValues")
	proto.RegisterType((*KeyValuePair)(nil), "mmal.KeyValuePair")
	proto.RegisterType((*Value)(nil), "mmal.Value")
	proto.RegisterEnum("mmal.Type", Type_name, Type_value)
	proto.RegisterEnum("mmal.Path_PathType", Path_PathType_name, Path_PathType_value)
	proto.RegisterEnum("mmal.PathChild_ChildType", PathChild_ChildType_name, PathChild_ChildType_value)
	proto.RegisterEnum("mmal.Error_ErrorType", Error_ErrorType_name, Error_ErrorType_value)
	proto.RegisterEnum("mmal.Request_RequestType", Request_RequestType_name, Request_RequestType_value)
	proto.RegisterEnum("mmal.Reply_ReplyType", Reply_ReplyType_name, Reply_ReplyType_value)
}

func init() { proto.RegisterFile("mmal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x72, 0xe3, 0x44,
	0x13, 0x5f, 0xd9, 0x92, 0x6d, 0xb5, 0xec, 0x58, 0x99, 0xef, 0x5b, 0x30, 0x81, 0x5a, 0xb2, 0xe2,
	0xc0, 0xb2, 0xb0, 0x01, 0x94, 0x54, 0x8e, 0x14, 0x71, 0xa2, 0x05, 0xd7, 0x3a, 0xb6, 0x6b, 0xa2,
	0x6c, 0xed, 0x9e, 0x5c, 0xca, 0x5a, 0x49, 0x54, 0x6b, 0x5b, 0x46, 0x52, 0x16, 0xcc, 0x73, 0x70,
	0xe1, 0xc4, 0x15, 0xaa, 0x38, 0xf1, 0x12, 0xbc, 0x06, 0x8f, 0x42, 0xcf, 0x1f, 0x8d, 0xa4, 0xb8,
	0x52, 0xcb, 0x95, 0x2a, 0x2e, 0xf6, 0xfc, 0xfa, 0xd7, 0xdd, 0xd3, 0xd3, 0xdd, 0xd3, 0x23, 0x80,
	0xc5, 0x22, 0x98, 0xef, 0xad, 0x92, 0x38, 0x8b, 0x89, 0xce, 0xd6, 0xce, 0xef, 0x1a, 0xe8, 0x93,
	0x20, 0xbb, 0x26, 0xff, 0x07, 0x63, 0x15, 0x24, 0x59, 0xda, 0xd3, 0x76, 0xeb, 0x8f, 0x4c, 0x2a,
	0x00, 0xe9, 0x41, 0xf3, 0x55, 0x3c, 0xbf, 0x59, 0x2c, 0xd3, 0x5e, 0x8d, 0xcb, 0x73, 0x48, 0x3e,
	0x06, 0x3d, 0x5b, 0xaf, 0xc2, 0x5e, 0x7d, 0x57, 0x7b, 0xb4, 0xe5, 0xfe, 0x6f, 0x8f, 0x7b, 0x66,
	0x9e, 0xf8, 0x8f, 0x8f, 0x14, 0xe5, 0x0a, 0xe4, 0x53, 0x68, 0xbd, 0xba, 0x8e, 0xe6, 0xb3, 0x24,
	0x5c, 0xf6, 0x74, 0xf4, 0x61, 0xb9, 0xdd, 0x42, 0xf9, 0x98, 0x31, 0x54, 0x29, 0x38, 0x0f, 0xa0,
	0x95, 0x9b, 0x93, 0x16, 0xe8, 0x43, 0xef, 0xe8, 0xa9, 0x7d, 0x8f, 0xad, 0x46, 0xe3, 0x13, 0xcf,
	0xd6, 0x9c, 0xaf, 0xc1, 0x54, 0x66, 0x84, 0x80, 0xbe, 0x42, 0x80, 0x11, 0x6b, 0x18, 0x19, 0x5f,
	0x3b, 0x1f, 0x82, 0xc9, 0xc9, 0x3b, 0x3d, 0xfc, 0x08, 0x86, 0x97, 0x24, 0x71, 0x42, 0x3e, 0x91,
	0x07, 0xd0, 0xf8, 0x01, 0xee, 0x8b, 0x98, 0x38, 0x25, 0x7e, 0x4b, 0x47, 0xc0, 0x2c, 0x2c, 0xc2,
	0x34, 0x0d, 0xae, 0x42, 0xcc, 0x02, 0xdb, 0x2b, 0x87, 0xce, 0x67, 0x60, 0x2a, 0x65, 0x62, 0x43,
	0x7b, 0x30, 0x7a, 0x7e, 0x34, 0x1c, 0x9c, 0x4c, 0x27, 0x47, 0xfe, 0xb7, 0xb8, 0x6d, 0x07, 0xe9,
	0x17, 0xc7, 0xde, 0xc4, 0x1f, 0x8c, 0x47, 0xb8, 0xf7, 0x2f, 0x35, 0x68, 0xd2, 0xf0, 0xbb, 0x9b,
	0x30, 0xcd, 0xc8, 0x16, 0xd4, 0xa2, 0x99, 0x0c, 0x1d, 0x57, 0xe4, 0x89, 0x0c, 0xa7, 0xc6, 0xc3,
	0x79, 0x4f, 0x84, 0x23, 0x95, 0xf3, 0xff, 0x52, 0x48, 0x07, 0xd0, 0x66, 0xe7, 0x9d, 0x26, 0x82,
	0xe1, 0x65, 0xb0, 0xdc, 0xed, 0x22, 0xb3, 0xd2, 0x84, 0x5a, 0xab, 0x02, 0x70, 0xab, 0x68, 0x79,
	0xa5, 0xac, 0xf4, 0x8a, 0x15, 0x32, 0x85, 0x55, 0x01, 0xc8, 0x21, 0x40, 0x96, 0x2a, 0x1b, 0x83,
	0xdb, 0xbc, 0x2b, 0x6c, 0xfc, 0x68, 0x11, 0x9e, 0x85, 0x49, 0x14, 0xa6, 0xb9, 0xa5, 0x99, 0xe5,
	0x4b, 0xe7, 0x4b, 0xb0, 0x4a, 0x81, 0xb3, 0x1a, 0x4c, 0x06, 0xa3, 0x6f, 0x44, 0x35, 0x78, 0x82,
	0x34, 0xcc, 0x02, 0xf8, 0x83, 0x53, 0xef, 0xcc, 0xa3, 0x03, 0xef, 0xcc, 0xae, 0x39, 0xbf, 0xd6,
	0xc0, 0xa0, 0xe1, 0x6a, 0xbe, 0xde, 0xc8, 0xcf, 0x43, 0x30, 0x42, 0x96, 0x69, 0x9e, 0x20, 0xcb,
	0xb5, 0x4a, 0xf5, 0xa2, 0x82, 0x51, 0x15, 0xad, 0x97, 0x2b, 0xca, 0xbd, 0x89, 0xdf, 0x52, 0xfa,
	0xf6, 0x00, 0x64, 0xfa, 0x50, 0x2e, 0xd3, 0xd0, 0x2d, 0x27, 0x0f, 0xc5, 0xd4, 0x5c, 0xe5, 0x4b,
	0xae, 0x1f, 0xf3, 0xc4, 0x31, 0x7d, 0xa3, 0xa2, 0x1f, 0xb3, 0x4c, 0x09, 0xfd, 0x7c, 0x49, 0xbe,
	0x80, 0x16, 0x4f, 0x19, 0xd3, 0x6e, 0x70, 0xed, 0xfb, 0x9b, 0x09, 0x63, 0x36, 0xcd, 0x4c, 0x2c,
	0x9c, 0xcf, 0xc1, 0x54, 0x41, 0xf2, 0x04, 0x8d, 0xdf, 0x92, 0xaa, 0x87, 0x60, 0x95, 0x2a, 0xc6,
	0x2f, 0x03, 0x42, 0x75, 0x19, 0x70, 0xed, 0xf4, 0xf1, 0xb6, 0xa8, 0x90, 0x98, 0x42, 0x5c, 0x52,
	0xc0, 0xf5, 0x3f, 0x48, 0xaa, 0xf3, 0x0c, 0xb7, 0x29, 0x75, 0xd0, 0x2e, 0x1b, 0x13, 0xd9, 0xb5,
	0x18, 0x13, 0x96, 0x0b, 0xa5, 0x9c, 0x09, 0x82, 0xec, 0x94, 0xee, 0x3b, 0x73, 0xdb, 0x2a, 0x5d,
	0xef, 0x27, 0xe2, 0xfa, 0x8a, 0x80, 0xde, 0xea, 0xca, 0xf9, 0x4d, 0x83, 0xed, 0x8d, 0x0e, 0xdb,
	0xe8, 0x0c, 0xdc, 0x70, 0x95, 0x44, 0x71, 0x12, 0x65, 0x6b, 0xbe, 0xa1, 0x41, 0x15, 0x26, 0xef,
	0x40, 0x23, 0xbe, 0xbc, 0x4c, 0x43, 0x71, 0x41, 0x0c, 0x2a, 0x11, 0x9b, 0x76, 0xf3, 0x68, 0x11,
	0x89, 0x1b, 0x60, 0x50, 0x01, 0x8a, 0x88, 0x8c, 0xbb, 0x0e, 0x57, 0x9a, 0x87, 0x8d, 0xca, 0x3c,
	0x74, 0x7e, 0xd6, 0xa0, 0x7b, 0xab, 0xb8, 0x1b, 0x91, 0xe2, 0x85, 0xc8, 0x50, 0x65, 0x9a, 0x72,
	0x1d, 0x3e, 0x51, 0x2d, 0xd7, 0xde, 0x68, 0x0c, 0xc8, 0xd4, 0xba, 0x08, 0xa9, 0x7e, 0x57, 0x48,
	0xaa, 0x86, 0xfa, 0x9d, 0x35, 0xfc, 0x4b, 0xc7, 0xde, 0x29, 0x7c, 0xde, 0x0e, 0x0b, 0x0f, 0xf5,
	0x26, 0x4c, 0xd2, 0x28, 0x5e, 0xe6, 0xe3, 0x4d, 0x42, 0x0c, 0x58, 0x1d, 0x57, 0xec, 0xbf, 0x71,
	0xed, 0xf7, 0x8e, 0x39, 0x5f, 0xbc, 0x0b, 0x38, 0xee, 0x17, 0x61, 0x16, 0xcc, 0x82, 0x2c, 0xa8,
	0xde, 0xab, 0x67, 0xe1, 0xfa, 0x79, 0x30, 0xc7, 0x0a, 0x52, 0xa5, 0xb0, 0xf3, 0x67, 0x1d, 0x1a,
	0xc2, 0x01, 0x0b, 0x62, 0x16, 0xdf, 0x5c, 0xcc, 0x43, 0xd1, 0x0f, 0x1a, 0xcd, 0x21, 0xab, 0xe1,
	0xe5, 0x3c, 0x0e, 0x32, 0x91, 0xb0, 0x1a, 0x95, 0x88, 0xc9, 0xa3, 0x65, 0xb6, 0xef, 0x8a, 0xd8,
	0xb0, 0xb6, 0x02, 0x49, 0xf9, 0xe1, 0x41, 0xca, 0x9f, 0x9b, 0x3a, 0x95, 0x88, 0xed, 0x70, 0x23,
	0x0d, 0x58, 0x7d, 0x3b, 0x34, 0x87, 0x39, 0xc3, 0x4c, 0x58, 0x55, 0x75, 0x9a, 0x43, 0xc6, 0xa4,
	0xd2, 0xa6, 0x89, 0xcc, 0x36, 0xcd, 0x61, 0xce, 0x30, 0x9b, 0x16, 0x32, 0x84, 0xe6, 0x90, 0xf5,
	0xe3, 0x65, 0xf4, 0x43, 0x38, 0x63, 0x46, 0x26, 0x52, 0x4d, 0xaa, 0xb0, 0xe2, 0x98, 0x19, 0x20,
	0xd7, 0xa0, 0x0a, 0x93, 0x0f, 0xc0, 0x4c, 0x95, 0xa1, 0x85, 0x64, 0x97, 0x16, 0x82, 0x82, 0x65,
	0xa6, 0x6d, 0x64, 0x6d, 0x5a, 0x08, 0x58, 0x3f, 0x5f, 0xc4, 0xf1, 0x3c, 0xed, 0x75, 0x90, 0x69,
	0x51, 0x01, 0x78, 0x8c, 0x59, 0x82, 0x93, 0x20, 0xed, 0x6d, 0x89, 0x6e, 0x95, 0x90, 0xbc, 0x0f,
	0x66, 0x12, 0x7c, 0x3f, 0xbd, 0x58, 0x67, 0x98, 0xef, 0x2e, 0x72, 0x6d, 0xda, 0x42, 0x41, 0x9f,
	0x61, 0xf2, 0x40, 0xce, 0x51, 0x9b, 0xcf, 0x51, 0xd9, 0x72, 0xa5, 0xe1, 0x89, 0x93, 0x64, 0x19,
	0x2c, 0xc2, 0xde, 0xb6, 0x98, 0x24, 0x6c, 0xed, 0x7c, 0x05, 0xa6, 0x2a, 0x30, 0xb6, 0x0d, 0xbc,
	0x0e, 0xd7, 0xd3, 0x37, 0x1c, 0xc9, 0xeb, 0x4d, 0xaa, 0x5d, 0x30, 0x09, 0xa2, 0x84, 0x9a, 0xaf,
	0x73, 0x13, 0xc7, 0x83, 0x76, 0x99, 0xc2, 0xb7, 0xb4, 0x8e, 0xa4, 0x6c, 0x52, 0xb6, 0x24, 0x1f,
	0x41, 0x43, 0x3a, 0xac, 0x0c, 0x2b, 0x6e, 0x42, 0x25, 0xe5, 0xfc, 0x51, 0x07, 0x83, 0x4b, 0xfe,
	0xeb, 0xa7, 0x7f, 0x4d, 0x3f, 0x3d, 0xfe, 0xa9, 0x06, 0x3a, 0x7f, 0xf6, 0xba, 0x60, 0xf9, 0x2f,
	0x27, 0xde, 0xf4, 0x64, 0x7c, 0xde, 0x1f, 0x7a, 0xf8, 0xfa, 0xb1, 0x37, 0x8f, 0x09, 0x9e, 0x0e,
	0xc7, 0x47, 0xbe, 0x7c, 0x03, 0x19, 0x1e, 0x8c, 0xfc, 0xc3, 0x03, 0xbb, 0xa6, 0x0c, 0xce, 0x85,
	0xa0, 0x5e, 0x56, 0xd8, 0x77, 0x6d, 0x9d, 0x7d, 0x92, 0x09, 0x07, 0x83, 0x17, 0xde, 0x09, 0x6a,
	0x18, 0x55, 0x09, 0xea, 0x34, 0xd8, 0x47, 0x1a, 0x97, 0xf4, 0xc7, 0xe3, 0xa1, 0xdd, 0x54, 0x3e,
	0xcf, 0x7c, 0xca, 0xbe, 0x56, 0x5a, 0xca, 0x67, 0xff, 0xa5, 0x8f, 0x0f, 0xaf, 0x59, 0xd9, 0x14,
	0x1d, 0x80, 0x72, 0xe0, 0x8d, 0xce, 0x4f, 0x6d, 0x8b, 0x6c, 0x43, 0x47, 0x38, 0xc8, 0xb7, 0x68,
	0xdf, 0x12, 0x61, 0x1c, 0x9d, 0x62, 0x1b, 0xe1, 0x65, 0xab, 0x22, 0x40, 0x8d, 0xae, 0xeb, 0x82,
	0x7e, 0x7a, 0x7a, 0x34, 0x24, 0x8f, 0x01, 0xe8, 0xe4, 0x38, 0x7f, 0xfd, 0x3a, 0x95, 0x2f, 0xc3,
	0x1d, 0xab, 0xf4, 0x95, 0xe3, 0xdc, 0xeb, 0xdb, 0xb0, 0x15, 0x27, 0x57, 0x7b, 0xc5, 0x67, 0xfe,
	0x45, 0x83, 0xff, 0xed, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x33, 0xb9, 0x9d, 0xf3, 0xfb, 0x0b,
	0x00, 0x00,
}
